apply plugin:'java'
apply plugin:'application'

import org.ajoberstar.gradle.git.tasks.*

/**
 * Dependency Information
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}

def libpdDir = "$projectDir/src/libpd/"

dependencies {
    // The libpd JAR is required for RAMP to compile.
    compile fileTree(dir: "$libpdDir/libs/", include: '*.jar')
}

/**
 * Program Arguments
 */

mainClassName = 'JavaSoundSample.JavaSoundSample'

run.doFirst {
    // Include the native libpd libraries when running RAMP.
    // If we don't do this the program will crash.
    systemProperty 'java.library.path', "$libpdDir/libs/"
}

/**
 * Custom Tasks
 */

defaultTasks 'build'

// Downloads the current version of libpd and prepares it for commiting.
task downloadLibpd(type: GitClone) {
    description 'Downloads the current version of libpd and prepares it for commiting.'


    // Download libpd.
    def destination = file(libpdDir)
    if (! destination.exists() ) {
        println ">> Downloading the latest libpd version."
    }

    uri = "https://github.com/libpd/libpd.git"
    destinationPath = destination
    bare = false
    enabled = !destination.exists()

    doLast {
        // Remove all the files and directories we don't need.
        println ">> Cleaning up libpd directory."
        delete file("$libpdDir/.classpath")
        delete file("$libpdDir/.git")
        delete file("$libpdDir/.gitmodules")
        delete file("$libpdDir/.project")
        delete file("$libpdDir/Android.mk")
        delete file("$libpdDir/cpp/")
        delete file("$libpdDir/csharp/")
        delete file("$libpdDir/csharp/")
        delete file("$libpdDir/csharptests/")
        delete file("$libpdDir/javatests/")
        delete file("$libpdDir/libpd.xcodeproj")
        delete file("$libpdDir/libpd_win.sln")
        delete file("$libpdDir/mingw_build.bat")
        delete file("$libpdDir/objc/")
        delete file("$libpdDir/python/")
        delete file("$libpdDir/samples/")
        delete fileTree(dir: "$libpdDir/libs/")

        // Add a gitignore so that the libs folder gets committed.
        // If the folder doesn't exist, compiling libpd will fail.
        def file = new File("$libpdDir/libs/.gitignore")
        file.write('')
    }
}

// Deletes all compiled libpd libraries.
task cleanLibpd {
    description 'Deletes all compiled libpd libraries.'

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir libpdDir
            commandLine 'make', 'clobber'
            standardOutput = stdout
        }
        println stdout.toString()
    }
}
clean.dependsOn cleanLibpd

// Builds the libpd library for your current OS.
task buildLibpd(dependsOn: downloadLibpd) {
    description 'Compiles the libpd Java library.'

    outputs.dir "$libpdDir/libs/"

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir libpdDir
            commandLine 'make', 'javalib'
            standardOutput = stdout
        }
        println stdout.toString()
    }
}
build.dependsOn buildLibpd