apply plugin:'java'
apply plugin:'application'


import org.ajoberstar.gradle.git.tasks.*


/**
 * Helper Functions
 */

// Downloads a file to a given directory.
def download(address, outputDir)
{
    // Create the output directory if necessary.
    new File(outputDir).mkdirs()

    // Download the file.
    def file = new FileOutputStream(outputDir + address.tokenize('/')[-1])
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}


/**
 * Gradle Buildscript Dependencies
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}


/**
 * Project Dependencies
 */

def libpdDir = "$projectDir/src/libpd/"

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.undertow:undertow-core:1.0.0.Beta29'

    // The libpd JAR is required for RAMP to compile.
    compile fileTree(dir: "$libpdDir/libs/", include: '*.jar')
}


/**
 * Program Arguments
 */

//mainClassName = 'JavaSoundSample.JavaSoundSample'
mainClassName = 'RAMPServer.RAMPServer'

run.doFirst {
    // Include the native libpd libraries when running RAMP.
    // If we don't do this the program will crash.
    systemProperty 'java.library.path', "$libpdDir/libs/"
}


/**
 * Deployment Tasks
 */

task stage(dependsOn: ['clean', 'installApp'])


/**
 * Custom Tasks
 */

defaultTasks 'build'

// Downloads the current version of libpd and prepares it for committing.
task downloadLibpd(type: GitClone) {
    description 'Downloads the current version of libpd and prepares it for committing.'

    // Download libpd.
    def destination = file(libpdDir)
    if (! destination.exists() ) {
        println '>> Downloading the latest libpd version.'
    }

    uri = 'https://github.com/libpd/libpd.git'
    destinationPath = destination
    bare = false
    enabled = !destination.exists()

    doLast {
        // Remove all the files and directories we don't need.
        println '>> Cleaning up libpd directory.'
        delete file("$libpdDir/.classpath")
        delete file("$libpdDir/.git")
        delete file("$libpdDir/.gitmodules")
        delete file("$libpdDir/.project")
        delete file("$libpdDir/Android.mk")
        delete file("$libpdDir/cpp/")
        delete file("$libpdDir/csharp/")
        delete file("$libpdDir/csharp/")
        delete file("$libpdDir/csharptests/")
        delete file("$libpdDir/dist/")
        delete file("$libpdDir/javatests/")
        delete file("$libpdDir/libpd.xcodeproj")
        delete file("$libpdDir/libpd_win.sln")
        delete file("$libpdDir/mingw_build.bat")
        delete file("$libpdDir/objc/")
        delete file("$libpdDir/python/")
        delete file("$libpdDir/samples/")
        delete fileTree(dir: "$libpdDir/libs/")

        // Add a gitignore so that the libs folder gets committed.
        // If the folder doesn't exist, compiling libpd will fail.
        new File("$libpdDir/libs/.gitignore").write('')

        // A list of all the externals that we need to download.
        def externals = [
            "ggee/filters": [
                "bandpass.c",
                "filters.h",
                "highpass.c",
                "lowpass.c"
            ],

            "mrpeach/net": [
                "LICENSE.txt",
                "udpreceive.c",
                "udpsend.c"
            ],

            "mrpeach/osc": [
                "LICENSE.txt",
                "packingOSC.h",
                "packOSC.c",
                "pipelist.c",
                "routeOSC.c",
                "unpackOSC.c"
            ],

            "unauthorized": [
                "compressor~.c"
            ]
        ]

        def srcFiles = [], fileSetup = []
        println '>> Downloading externals.'
        externals.each { folder, files ->
            files.each { file ->
                // Download the externals.
                download(
                    "https://svn.code.sf.net/p/pure-data/svn/trunk/externals/$folder/$file",
                    "$libpdDir/pure-data/extra/$folder/"
                )

                // List each file we need to add to the Makefile and initialize() method.
                if (file.endsWith('.c')) {
                    srcFiles.add("pure-data/extra/$folder/$file")
                    fileSetup.add('  ' + file.tokenize(".")[0] + '_setup();')
                }
            }
        }

        // Add $srcFiles to PD_FILES in the Makefile.
        println '>> Patching Makefile.'
        def makefile = new File("$libpdDir/Makefile")
        def fileText = makefile.text
        fileText = fileText.replaceAll('PD_FILES =', "PD_FILES = ${srcFiles.join(' ')}")
        makefile.write(fileText)

        // Add $fileSetup calls to the JNI initialize() method.
        println '>> Patching jni/z_jni_shared.c'
        def jni = new File("$libpdDir/jni/z_jni_shared.c")
        fileText = jni.text
        fileText = fileText.replaceAll('libpd_queued_init\\(\\);', "libpd_queued_init();\n${fileSetup.join('\n')}")
        jni.write(fileText)
    }
}

// Deletes all compiled libpd libraries.
task cleanLibpd {
    description 'Deletes all compiled libpd libraries.'

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir libpdDir
            commandLine 'make', 'clobber'
            standardOutput = stdout
        }
        println stdout.toString()

        // Clobber doesn't delete every file in the "libs" folder, causing Gradle
        // to sometimes think that buildLibpd is up-to-date even though it's not.
        delete fileTree(dir: "$libpdDir/libs/")
    }
}
clean.dependsOn cleanLibpd

// Builds the libpd library for your current OS.
task buildLibpd(dependsOn: downloadLibpd) {
    description 'Compiles the libpd Java library.'

    outputs.dir "$libpdDir/libs/"

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir libpdDir
            commandLine 'make', 'javalib'
            standardOutput = stdout
        }
        println stdout.toString()
    }
}
compileJava.dependsOn buildLibpd